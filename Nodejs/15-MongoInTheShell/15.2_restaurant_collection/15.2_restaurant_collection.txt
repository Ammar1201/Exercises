use findMyRestaurant

1.CRUD
  1.1 - db.restaurants.find()
  1.2 - db.restaurants.find({cuisine: "cuisine2"})
  1.3 - db.restaurants.find({halal: true})
  1.4 - db.restaurants.find({"address.city": "city3"})
  1.5 - db.restaurants.find({"address.city": "city1", "address.street": "street1", "address.coordinates":  [ -77.564, 40.677 ]})
  1.6 - db.restaurants.find({"address.coordinates":  [ -55.564, 100.677 ]})
  1.7 - db.restaurants.find({"address.city": {$exists: 1}}).sort({"address.city": 1})
  1.8 - db.restaurants.find({"address.city": {$exists: 1}}).sort({"address.city": -1})
  1.9 - db.restaurants.updateOne({_id: ObjectId("6395e56823bb404723be3d3e")}, {$set: {restaurantName: "hello"}})
  1.10 - db.restaurants.updateOne({_id: ObjectId("6395e57823bb404723be3d3f")}, {$push:{reviews: { date: "15/9", score: 7.5}}})
  1.11 - db.restaurants.updateMany({}, {$set: {halal: true}})
  1.12 - db.restaurants.deleteOne({_id: ObjectId("6395e57823bb404723be3d3f")})
  1.13 - db.restaurants.deleteMany({})

2.forEach Queries
  2.1 - db.restaurants.find().forEach(restaurant => printjson(restaurant))
  2.2 - db.restaurants.find().forEach(restaurant => printjson(`city name is ${restaurant.address.city}`))
  2.3 - db.restaurants.find().forEach(restaurant => printjson(`lang is ${restaurant.address.coordinates[0]}, lati is ${restaurant.address.coordinates[1]}`))

3.Advanced Queries
  3.1 - db.restaurants.find().forEach(restaurant => {if(restaurant.restaurantName[0] === 'r') printjson(restaurant)})
  3.2 - db.restaurants.find().count()
  3.3 - db.restaurants.find().forEach(restaurant => {restaurant.reviews.forEach(review => {if(review.date === '13/5') printjson(restaurant)})})

4.Aggregation operations
  4.1 - db.restaurants.aggregate([{$unwind:"$reviews"},{$group:{_id:null,avgScores:{$avg:"$reviews.score"}}}])
  4.2 - 